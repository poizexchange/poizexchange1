import json, asyncio, logging
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo, Message, ReplyKeyboardRemove,
    ReplyKeyboardMarkup, KeyboardButton
)
from sqlalchemy.ext.asyncio import AsyncSession
from .config import settings
from .db import add_subscriber, all_subscribers, remove_subscriber, ExchangeRequest

router = Router()
log = logging.getLogger(__name__)

def kb_main_inline() -> InlineKeyboardMarkup:
    v = "59"  # –ø–æ–¥–Ω–∏–º–∞–π –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö —Ñ—Ä–æ–Ω—Ç–∞, —á—Ç–æ–±—ã —Å–±–∏–≤–∞—Ç—å –∫—ç—à WebView
    base = settings.webapp_base_url.rstrip("/")
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä",  web_app=WebAppInfo(url=f"{base}/index.html?v={v}"))],
        [InlineKeyboardButton(text="üìä –¢–∞–±–ª–æ –∫—É—Ä—Å–æ–≤", web_app=WebAppInfo(url=f"{base}/rates.html?v={v}"))],
        [InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç WebApp",  web_app=WebAppInfo(url=f"{base}/test.html?v={v}"))],
        [InlineKeyboardButton(text="üí¨ –ß–∞—Ç", url="https://t.me/poizchat")],
        [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º", url="https://t.me/poizmanager")],
    ])

def kb_main_reply() -> ReplyKeyboardMarkup:
    v = "24"
    base = settings.webapp_base_url.rstrip("/")
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", web_app=WebAppInfo(url=f"{base}/index.html?v={v}"))],
            [KeyboardButton(text="üìä –¢–∞–±–ª–æ –∫—É—Ä—Å–æ–≤", web_app=WebAppInfo(url=f"{base}/rates.html?v={v}"))],
            [KeyboardButton(text="üß™ –¢–µ—Å—Ç WebApp", web_app=WebAppInfo(url=f"{base}/test.html?v={v}"))],
        ],
        resize_keyboard=True, one_time_keyboard=False
    )

# ===== –ö–æ–º–∞–Ω–¥—ã =====

@router.message(Command("start"))
async def cmd_start(m: types.Message, session: AsyncSession):
    await add_subscriber(session, m.from_user.id, m.from_user.username, m.from_user.first_name)
    await m.answer("–û–±–Ω–æ–≤–ª—è—é –º–µ–Ω—é‚Ä¶", reply_markup=ReplyKeyboardRemove())
    await m.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ Poiz Exchange üëã\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=kb_main_inline())

@router.message(Command("menu"))
async def cmd_menu(m: types.Message):
    await m.answer("–ú–µ–Ω—é (inline) –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ", reply_markup=ReplyKeyboardRemove())
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=kb_main_inline())

@router.message(Command("menu_reply"))
async def cmd_menu_reply(m: types.Message):
    await m.answer("–ú–µ–Ω—é (reply-–∫–Ω–æ–ø–∫–∏) –≥–æ—Ç–æ–≤–æ ‚úÖ\n–ù–∞–∂–º–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=kb_main_reply())

@router.message(Command("debug_links"))
async def cmd_debug_links(m: types.Message):
    v = "16"
    base = settings.webapp_base_url.rstrip("/")
    await m.answer(
        "–¢–µ–∫—É—â–∏–µ —Å—Å—ã–ª–∫–∏ WebApp:\n"
        f"üßÆ {base}/index.html?v={v}\n"
        f"üìä {base}/rates.html?v={v}\n"
        f"üß™ {base}/test.html?v={v}\n"
        f"(–∏—Å—Ç–æ—á–Ω–∏–∫: .env ‚Üí WEBAPP_BASE_URL)\n"
    )

@router.message(Command("test"))
async def cmd_test(m: types.Message):
    base = settings.webapp_base_url.rstrip("/")
    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üîß –û—Ç–∫—Ä—ã—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π WebApp", web_app=WebAppInfo(url=f"{base}/test.html?v=16"))
    ]])
    await m.answer("–û—Ç–∫—Ä–æ–π –∏ –Ω–∞–∂–º–∏ ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å ping¬ª.", reply_markup=kb)

@router.message(Command("test_reply"))
async def cmd_test_reply(m: types.Message):
    base = settings.webapp_base_url.rstrip("/")
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîß –¢–µ—Å—Ç WebApp (reply)", web_app=WebAppInfo(url=f"{base}/test.html?v=16"))]],
        resize_keyboard=True, one_time_keyboard=True
    )
    await m.answer("–ù–∞–∂–º–∏ –∑–µ–ª—ë–Ω—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∑–∞—Ç–µ–º ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å ping¬ª.", reply_markup=kb)

# ===== –ü—Ä–∏—ë–º –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp (sendData) =====

# –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π ‚Äî –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –ü–ï–†–í–´–ú –ø–æ –ø–æ—Ä—è–¥–∫—É, –±–µ–∑ –ë–î
@router.message(F.web_app_data)
async def on_webapp_diag(m: Message):
    raw = getattr(m, "web_app_data", None)
    payload_txt = (raw.data if (raw and raw.data) else "")
    try:
        await m.answer("üü¢ MIN: web_app_data –ø–æ–ª—É—á–µ–Ω–æ")
        await m.answer(f"MIN RAW:\n{payload_txt[:2000]}")
    except Exception:
        pass

# –û—Å–Ω–æ–≤–Ω–æ–π ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞—è–≤–∫—É –∏ —à–ª—ë—Ç –∞–¥–º–∏–Ω—É
@router.message(F.web_app_data)
async def on_webapp_request(m: Message, session: AsyncSession):
    raw = getattr(m, "web_app_data", None)
    payload_txt = (raw.data if (raw and raw.data) else "")

    # –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    try:
        await m.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é‚Ä¶")
    except Exception:
        pass

    # –ø–∞—Ä—Å–∏–º JSON
    try:
        data = json.loads(payload_txt) if payload_txt else {}
    except Exception as e:
        await m.answer("‚ùå –ù–µ —Å–º–æ–≥ –ø—Ä–æ—á–∏—Ç–∞—Ç—å JSON –æ—Ç WebApp.")
        await m.answer(f"RAW:\n{payload_txt[:1500]}")
        return

    # —Ç–µ—Å—Ç–æ–≤—ã–π ping
    if data.get("action") == "ping":
        await m.answer("‚úÖ Ping –ø—Ä–∏–Ω—è—Ç. tg.sendData —Ä–∞–±–æ—Ç–∞–µ—Ç.")
        return

    # –∑–∞—è–≤–∫–∞
    if data.get("action") != "request":
        await m.answer("‚ö†Ô∏è –ü—Ä–∏—à–ª–∏ –¥–∞–Ω–Ω—ã–µ WebApp, –Ω–æ action != 'request'.")
        await m.answer(f"PAYLOAD:\n```{json.dumps(data, ensure_ascii=False, indent=2)}```", parse_mode="Markdown")
        return

    try:
        req = ExchangeRequest(
            user_id=m.from_user.id,
            username=m.from_user.username,
            direction=data.get("direction",""),
            amount_in=float(data.get("amount") or 0),
            contact=(data.get("contact") or ""),
            requisites=(data.get("requisites") or ""),
            note=(data.get("note") or ""),
        )
        session.add(req)
        await session.commit()

        await m.answer(f"üéâ –ó–∞—è–≤–∫–∞ #{req.id} –ø—Ä–∏–Ω—è—Ç–∞. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏: @poizmanager")

        admin_chat = settings.admin_username.replace("@","")
        text = (
            f"üÜï –ó–∞—è–≤–∫–∞ #{req.id}\n"
            f"–û—Ç: @{req.username or req.user_id}\n"
            f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {req.direction}\n"
            f"–°—É–º–º–∞: {req.amount_in}\n"
            f"–ö–æ–Ω—Ç–∞–∫—Ç: {req.contact or '-'}\n"
            f"–†–µ–∫–≤–∏–∑–∏—Ç—ã: {req.requisites or '-'}\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {req.note or '-'}"
        )
        try:
            await m.bot.send_message(f"@{admin_chat}", text)
        except Exception as e:
            log.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É: %s", e)

    except Exception as e:
        await m.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—è–≤–∫—É. –ù–∞–ø–∏—à–∏—Ç–µ @poizmanager.")
        await m.answer(f"ERROR: {e!r}")

# ===== –†–∞—Å—Å—ã–ª–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è admin_username) =====
BROADCAST_STATE: dict[int, bool] = {}

@router.message(Command("sendall"))
async def sendall_start(m: types.Message, session: AsyncSession):
    if ("@" + (m.from_user.username or "")) != settings.admin_username:
        await m.answer("‚õî –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    BROADCAST_STATE[m.from_user.id] = True
    await m.answer("üì£ –ü—Ä–∏—à–ª–∏—Ç–µ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–¥–æ–∫—É–º–µ–Ω—Ç —Å –ø–æ–¥–ø–∏—Å—å—é).")

@router.message(F.from_user.id.func(lambda uid: BROADCAST_STATE.get(uid, False)))
async def sendall_collect(m: types.Message, session: AsyncSession):
    admin_id = m.from_user.id
    BROADCAST_STATE.pop(admin_id, None)

    subs_rows = await all_subscribers(session)
    subs = [row.id for row in subs_rows]
    await m.answer(f"üöÄ –û—Ç–ø—Ä–∞–≤–ª—è—é {len(subs)} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º...")

    sent, removed = 0, 0
    for chat_id in subs:
        try:
            await m.copy_to(chat_id=chat_id)
            sent += 1
        except Exception:
            await remove_subscriber(session, chat_id)
            removed += 1
        await asyncio.sleep(0.05)

    await m.answer(f"‚úÖ –ì–æ—Ç–æ–≤–æ. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}. –£–¥–∞–ª–µ–Ω–æ –∏–∑ –±–∞–∑—ã: {removed}.")

# ===== –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ ‚Äî –°–¢–†–û–ì–û –ü–û–°–õ–ï–î–ù–ò–ú –∏ –Ω–µ –ª–æ–≤–∏—Ç –∫–æ–º–∞–Ω–¥—ã =====
@router.message(F.text & ~F.text.startswith("/"))
async def catch_all(m: types.Message):
    await m.answer(f"DEBUG: content_type={m.content_type}")
